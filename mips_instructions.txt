
# MIPS instructions to add 16 and 14
    addi   $gp, $zero, 500  # set gp location
    addi   $t0, $zero, 16    # initialize first value in register
    sw     $t0, 0($gp)       # store first value in memory
    addi   $t0, $zero, 14    # initialize second value in register
    sw     $t0, 1($gp)       # store second value in memory

    lw     $t0, 0($gp)       # load first word for sum operation
    lw     $t1, 1($gp)       # load second word for sum operation
    add    $t2, $t0, $t1     # add first and second value, save to $t2
    sw     $t2, 2($gp)       # store result to next address in memory

    # At completion, memory index 502 should contain a value of 30

# MIPS instructions to subtract 5 from 9
    addi   $t0, $zero, 9    # initialize first value in register
    sw     $t0, 3($gp)       # store first value in memory
    addi   $t0, $zero, 5    # initialize second value in register
    sw     $t0, 4($gp)       # store second value in memory

    lw     $t0, 3($gp)       # load first word for sum operation
    lw     $t1, 4($gp)       # load second word for sum operation
    sub    $t2, $t0, $t1     # add first and second value, save to $t2
    sw     $t2, 5($gp)       # store result to next address in memory
    
    # At completion, memory index 505 should contain a value of 4

# MIPS instructions to multiply 6 and 8
    addi   $t0, $zero, 6     # initialize first value in register
    sw     $t0, 6($gp)       # store first value in memory
    addi   $t0, $zero, 8     # initialize second value in register
    sw     $t0, 7($gp)       # store second value in memory

    lw     $t0, 6($gp)       # load first word for sum operation
    lw     $t1, 7($gp)       # load second word for sum operation
    mul    $t2, $t0, $t1     # add first and second value, save to $t2
    sw     $t2, 8($gp)       # store result to next address in memory
    
    # At completion, memory index 508 should contain a value of 48

# MIPS instructions to divide 27 by 3
    addi   $t0, $zero, 27    # initialize first value in register
    sw     $t0, 9($gp)       # store first value in memory
    addi   $t0, $zero, 3     # initialize second value in register
    sw     $t0, 10($gp)      # store second value in memory

    lw     $t0, 9($gp)       # load first word for sum operation
    lw     $t1, 10($gp)      # load second word for sum operation
    div    $t2, $t0, $t1     # add first and second value, save to $t2
    sw     $t2, 11($gp)      # store result to next address in memory
    
    # At completion, memory index 511 should contain a value of 9

# MIPS instructions to branch if 27 does not equal 3
    lw     $t0, 9($gp)       # load first word for sum operation
    lw     $t1, 10($gp)      # load second word for sum operation
    bne    $t0, $t1, branch1 # branch to branch 1
    add    $t2, $t0, $t1     # add t1 and t0
    sw     $t2, 12($gp)      # store sum of t1 and t0
branch1: sub $t2, $t0, $t1   # subtract t1 from t0
    sw     $t2, 13($gp)      # save result to address 13 in memory

    # At completion, memory index 512 should be empty, and 513 should contain a value of 24

# MIPS instructions to branch if 3 does equal 3
    lw     $t0, 10($gp)      # load first word for sum operation
    lw     $t1, 10($gp)      # load second word for sum operation
    beq    $t0, $t1, branch2 # branch to branch 1
    add    $t2, $t0, $t1     # add t1 and t0
    sw     $t2, 14($gp)      # store sum of t1 and t0
branch2: sub $t2, $t0, $t1   # subtract t1 from t0
    sw     $t2, 15($gp)      # save result to address 13 in memory

    # At completion, memory index 514 should be empty, and 515 should contain a value of 0

# MIPS instructions to execute a while loop
    addi   $v0, $zero, 0    # initialize counter
    addi   $v1, $zero, 7    # initialize loop end variable
    addi   $t0, $zero, 1    # initialize increment register
loop: add  $v0, $v0, $t0    # increment counter
    beq    $v0, $v1, exit   # exit loop if v1 = v0
    j      loop             # jump to start of loop
exit: sw   $v0, 16($gp)     # save final counter value
    
    # At completion memory index 516 should equal 7